
ATMEGA32-LCD16x8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000520  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001307  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007aa  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000868  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000029cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f4  00000000  00000000  00002ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bdd  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003bb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 99 01 	call	0x332	; 0x332 <main>
  7a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HAL_LCD_sendCMD>:
 * @brief HAL_LCD_sendCMD is a static helper function created to improve the readability of the code and to make it easier to understand. This function is used to process any command that
 * we pass to it from any other function.
 * 
 * @param au8_cmd is the variable that contains the 8 bit command that we cant to excute. (!MY KIT ONLY HAD 4 BITS, WHICH IS WHY THE IMPLEMENTATION OF THE FUNCTION SENDS THE 8 BITS ON TWO STAGES!)
 */
static void HAL_LCD_sendCMD(u8_t au8_cmd){
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
	
	//Set RS PIN OF CTRL PORT TO LOW (SEND CMD)
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RS_PIN, LOW);
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Set R/W PIN TO LOW TO WRITE OVER LCD
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RW_PIN, LOW);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, getBit(au8_cmd, 4));
  9a:	c4 fb       	bst	r28, 4
  9c:	44 27       	eor	r20, r20
  9e:	40 f9       	bld	r20, 0
  a0:	60 e1       	ldi	r22, 0x10	; 16
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, getBit(au8_cmd, 5));
  a8:	c5 fb       	bst	r28, 5
  aa:	44 27       	eor	r20, r20
  ac:	40 f9       	bld	r20, 0
  ae:	60 e2       	ldi	r22, 0x20	; 32
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, getBit(au8_cmd, 6));
  b6:	c6 fb       	bst	r28, 6
  b8:	44 27       	eor	r20, r20
  ba:	40 f9       	bld	r20, 0
  bc:	60 e4       	ldi	r22, 0x40	; 64
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, getBit(au8_cmd, 7));
  c4:	4c 2f       	mov	r20, r28
  c6:	44 1f       	adc	r20, r20
  c8:	44 27       	eor	r20, r20
  ca:	44 1f       	adc	r20, r20
  cc:	60 e8       	ldi	r22, 0x80	; 128
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//sending enable signal for [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);	
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	87 ec       	ldi	r24, 0xC7	; 199
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <HAL_LCD_sendCMD+0x60>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <HAL_LCD_sendCMD+0x66>
  e8:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ LOWER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, getBit(au8_cmd, 0));
  f4:	4c 2f       	mov	r20, r28
  f6:	41 70       	andi	r20, 0x01	; 1
  f8:	60 e1       	ldi	r22, 0x10	; 16
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, getBit(au8_cmd, 1));
 100:	c1 fb       	bst	r28, 1
 102:	44 27       	eor	r20, r20
 104:	40 f9       	bld	r20, 0
 106:	60 e2       	ldi	r22, 0x20	; 32
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, getBit(au8_cmd, 2));
 10e:	c2 fb       	bst	r28, 2
 110:	44 27       	eor	r20, r20
 112:	40 f9       	bld	r20, 0
 114:	60 e4       	ldi	r22, 0x40	; 64
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, getBit(au8_cmd, 3));
 11c:	c3 fb       	bst	r28, 3
 11e:	44 27       	eor	r20, r20
 120:	40 f9       	bld	r20, 0
 122:	60 e8       	ldi	r22, 0x80	; 128
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
		
	//sending enable signal for [ LOWER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	68 e0       	ldi	r22, 0x08	; 8
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
 134:	87 ec       	ldi	r24, 0xC7	; 199
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <HAL_LCD_sendCMD+0xb6>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <HAL_LCD_sendCMD+0xbc>
 13e:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	68 e0       	ldi	r22, 0x08	; 8
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
		
	return;
}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <HAL_LCD_sendData>:
 * @brief HAL_LCD_sendData is a static helper function created to improve the readability of the code and to make it easier to understand. This function is used to process any data that
 * we pass to it from any other function.
 * 
 * @param au8_data is the variable containing the data that we will display on the LCD16x8
 */
static void HAL_LCD_sendData(u8_t au8_data){
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
	
	//Set RS PIN OF CTRL PORT TO HIGH (SEND DATA)
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RS_PIN, HIGH);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Set R/W PIN TO LOW TO WRITE OVER LCD
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RW_PIN, LOW);
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	64 e0       	ldi	r22, 0x04	; 4
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, getBit(au8_data, 4));
 166:	c4 fb       	bst	r28, 4
 168:	44 27       	eor	r20, r20
 16a:	40 f9       	bld	r20, 0
 16c:	60 e1       	ldi	r22, 0x10	; 16
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, getBit(au8_data, 5));
 174:	c5 fb       	bst	r28, 5
 176:	44 27       	eor	r20, r20
 178:	40 f9       	bld	r20, 0
 17a:	60 e2       	ldi	r22, 0x20	; 32
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, getBit(au8_data, 6));
 182:	c6 fb       	bst	r28, 6
 184:	44 27       	eor	r20, r20
 186:	40 f9       	bld	r20, 0
 188:	60 e4       	ldi	r22, 0x40	; 64
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, getBit(au8_data, 7));
 190:	4c 2f       	mov	r20, r28
 192:	44 1f       	adc	r20, r20
 194:	44 27       	eor	r20, r20
 196:	44 1f       	adc	r20, r20
 198:	60 e8       	ldi	r22, 0x80	; 128
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//sending enable signal for [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	68 e0       	ldi	r22, 0x08	; 8
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
 1aa:	87 ec       	ldi	r24, 0xC7	; 199
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <HAL_LCD_sendData+0x60>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <HAL_LCD_sendData+0x66>
 1b4:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 1b6:	41 e0       	ldi	r20, 0x01	; 1
 1b8:	68 e0       	ldi	r22, 0x08	; 8
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ LOWER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, getBit(au8_data, 0));
 1c0:	4c 2f       	mov	r20, r28
 1c2:	41 70       	andi	r20, 0x01	; 1
 1c4:	60 e1       	ldi	r22, 0x10	; 16
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, getBit(au8_data, 1));
 1cc:	c1 fb       	bst	r28, 1
 1ce:	44 27       	eor	r20, r20
 1d0:	40 f9       	bld	r20, 0
 1d2:	60 e2       	ldi	r22, 0x20	; 32
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, getBit(au8_data, 2));
 1da:	c2 fb       	bst	r28, 2
 1dc:	44 27       	eor	r20, r20
 1de:	40 f9       	bld	r20, 0
 1e0:	60 e4       	ldi	r22, 0x40	; 64
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, getBit(au8_data, 3));
 1e8:	c3 fb       	bst	r28, 3
 1ea:	44 27       	eor	r20, r20
 1ec:	40 f9       	bld	r20, 0
 1ee:	60 e8       	ldi	r22, 0x80	; 128
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//sending enable signal for [ LOWER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	68 e0       	ldi	r22, 0x08	; 8
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
 200:	87 ec       	ldi	r24, 0xC7	; 199
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <HAL_LCD_sendData+0xb6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <HAL_LCD_sendData+0xbc>
 20a:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 20c:	41 e0       	ldi	r20, 0x01	; 1
 20e:	68 e0       	ldi	r22, 0x08	; 8
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	return;
}
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <HAL_LCD_init>:
 * 
 */
void HAL_LCD_init(void){
	
	//SET CTRL PINS TO OUTPUT
	MCAL_GPIO_PinMode(HAL_LCD_CTRL_PORT, (HAL_LCD_RS_PIN | HAL_LCD_RW_PIN | HAL_LCD_EN_PIN), OUTPUT);
 21a:	42 e0       	ldi	r20, 0x02	; 2
 21c:	6e e0       	ldi	r22, 0x0E	; 14
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <MCAL_GPIO_PinMode>
	
	//SET DATA PINS TO OUTPUT
	MCAL_GPIO_PinMode(HAL_LCD_DATA_PORT, (HAL_LCD_D4_PIN | HAL_LCD_D5_PIN | HAL_LCD_D6_PIN | HAL_LCD_D7_PIN), OUTPUT);
 224:	42 e0       	ldi	r20, 0x02	; 2
 226:	60 ef       	ldi	r22, 0xF0	; 240
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <MCAL_GPIO_PinMode>
	
	//Initialize enable TO HIGH
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	68 e0       	ldi	r22, 0x08	; 8
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	80 e7       	ldi	r24, 0x70	; 112
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <HAL_LCD_init+0x24>
 246:	00 c0       	rjmp	.+0      	; 0x248 <HAL_LCD_init+0x2e>
 248:	00 00       	nop
	
	//INITIALIZE THE LCD
	_delay_ms(50);
	
	//Set RS PIN OF CTRL PORT TO LOW (SEND CMD)
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RS_PIN, LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Set R/W PIN TO LOW TO WRITE OVER LCD
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_RW_PIN, LOW);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	64 e0       	ldi	r22, 0x04	; 4
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Getting the pin state of au8_cmd and setting each pin with same value [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D4_PIN, LOW);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	60 e1       	ldi	r22, 0x10	; 16
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D5_PIN, HIGH);
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	60 e2       	ldi	r22, 0x20	; 32
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D6_PIN, LOW);
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	60 e4       	ldi	r22, 0x40	; 64
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	MCAL_GPIO_PinState(HAL_LCD_DATA_PORT, HAL_LCD_D7_PIN, LOW);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	60 e8       	ldi	r22, 0x80	; 128
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//sending enable signal for [ UPPER NIBBLE ]
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, LOW);
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	87 ec       	ldi	r24, 0xC7	; 199
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <HAL_LCD_init+0x7a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <HAL_LCD_init+0x80>
 29a:	00 00       	nop
	_delay_us(50);
	MCAL_GPIO_PinState(HAL_LCD_CTRL_PORT, HAL_LCD_EN_PIN, HIGH);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	68 e0       	ldi	r22, 0x08	; 8
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_GPIO_PinState>
	
	//Function set command
	HAL_LCD_sendCMD(0x2C);
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
 2ac:	87 ec       	ldi	r24, 0xC7	; 199
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <HAL_LCD_init+0x96>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <HAL_LCD_init+0x9c>
 2b6:	00 00       	nop
	
	//wait for 50us
	_delay_us(50);
	
	//Display ON/OFF command
	HAL_LCD_sendCMD(0x0F);
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
 2be:	87 ec       	ldi	r24, 0xC7	; 199
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <HAL_LCD_init+0xa8>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <HAL_LCD_init+0xae>
 2c8:	00 00       	nop
	
	//wait for 50us
	_delay_us(50);
	
	//CLEAR DISPLAY command
	HAL_LCD_sendCMD(0x01);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	8f e3       	ldi	r24, 0x3F	; 63
 2d2:	9f e1       	ldi	r25, 0x1F	; 31
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <HAL_LCD_init+0xba>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <HAL_LCD_init+0xc0>
 2da:	00 00       	nop
	
	_delay_ms(2); //!SUPER IMPORTANT!//
	
	//Entry mode command
	HAL_LCD_sendCMD(0x06);
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
 2e2:	08 95       	ret

000002e4 <HAL_LCD_displayCharacter>:
 * @param au8_charData is the data that will be passed to the LCD16x8.
 */
void HAL_LCD_displayCharacter(u8_t au8_charData){
	
	//send character data
	HAL_LCD_sendData(au8_charData);
 2e4:	0e 94 a7 00 	call	0x14e	; 0x14e <HAL_LCD_sendData>
 2e8:	08 95       	ret

000002ea <HAL_LCD_displayString>:
/**
 * @brief HAL_LCD_displayString is a function that displays a given string on the LCD16x8 screen (!Be careful of character overflows!)
 * 
 * @param pu8_srtData is a pointer to the 8 bits of dat that will be displayed. 
 */
void HAL_LCD_displayString(u8_t* pu8_srtData){
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	fc 01       	movw	r30, r24
	
	u8_t au8_i = -1;
	
	while(pu8_srtData[++au8_i] != '\0')
 2f2:	80 81       	ld	r24, Z
 2f4:	88 23       	and	r24, r24
 2f6:	59 f0       	breq	.+22     	; 0x30e <HAL_LCD_displayString+0x24>
 2f8:	8f 01       	movw	r16, r30
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		HAL_LCD_sendData(pu8_srtData[au8_i]);
 2fc:	0e 94 a7 00 	call	0x14e	; 0x14e <HAL_LCD_sendData>
 */
void HAL_LCD_displayString(u8_t* pu8_srtData){
	
	u8_t au8_i = -1;
	
	while(pu8_srtData[++au8_i] != '\0')
 300:	cf 5f       	subi	r28, 0xFF	; 255
 302:	f8 01       	movw	r30, r16
 304:	ec 0f       	add	r30, r28
 306:	f1 1d       	adc	r31, r1
 308:	80 81       	ld	r24, Z
 30a:	81 11       	cpse	r24, r1
 30c:	f7 cf       	rjmp	.-18     	; 0x2fc <HAL_LCD_displayString+0x12>
	{
		HAL_LCD_sendData(pu8_srtData[au8_i]);
	}
	
	return;
}
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <HAL_LCD_putAtLoc>:
 * @param au8_row is the variable containing the row where we want to move (!DO NOT FORGET TO USE THE MACROS!)
 * @param au8_col is the variable containing the column where we want to move (!DO NOT FORGET TO USE THE MACROS!)
 */
void HAL_LCD_putAtLoc(u8_t au8_row, u8_t au8_col){
	
	HAL_LCD_sendCMD(au8_row | au8_col);
 316:	86 2b       	or	r24, r22
 318:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
 31c:	08 95       	ret

0000031e <HAL_LCD_clearDisplay>:
 * @brief HAL_LCD_clearDisplay is a function that clears the display of the LCD16x8.
 * 
 */
void HAL_LCD_clearDisplay(void){
	
	HAL_LCD_sendCMD(0x01);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 41 00 	call	0x82	; 0x82 <HAL_LCD_sendCMD>
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	9f e1       	ldi	r25, 0x1F	; 31
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <HAL_LCD_clearDisplay+0xa>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <HAL_LCD_clearDisplay+0x10>
 32e:	00 00       	nop
 330:	08 95       	ret

00000332 <main>:
int main(void)
{
    u8_t au8_i = 0;
	u8_t au8_gobk = au8_i;
	
	HAL_LCD_init();
 332:	0e 94 0d 01 	call	0x21a	; 0x21a <HAL_LCD_init>
	HAL_LCD_putAtLoc(HAL_LCD_ROW01, HAL_LCD_COL02);
 336:	62 e0       	ldi	r22, 0x02	; 2
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	0e 94 8b 01 	call	0x316	; 0x316 <HAL_LCD_putAtLoc>
	HAL_LCD_displayString((u8_t*)"Barbary");
 33e:	80 e6       	ldi	r24, 0x60	; 96
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 75 01 	call	0x2ea	; 0x2ea <HAL_LCD_displayString>
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	89 e6       	ldi	r24, 0x69	; 105
 34a:	98 e1       	ldi	r25, 0x18	; 24
 34c:	21 50       	subi	r18, 0x01	; 1
 34e:	80 40       	sbci	r24, 0x00	; 0
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x1a>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x24>
 356:	00 00       	nop
	
	_delay_ms(500);
	
	HAL_LCD_clearDisplay();
 358:	0e 94 8f 01 	call	0x31e	; 0x31e <HAL_LCD_clearDisplay>
		for(au8_i = 0, au8_gobk = 0; au8_i <= 125; au8_i++, au8_gobk++)
		{

			if(au8_gobk == 16)
			{
				au8_gobk = 0;
 35c:	da e2       	ldi	r29, 0x2A	; 42
	
	HAL_LCD_clearDisplay();

    while (1) 
    {
		for(au8_i = 0, au8_gobk = 0; au8_i <= 125; au8_i++, au8_gobk++)
 35e:	c0 e0       	ldi	r28, 0x00	; 0
 360:	04 c0       	rjmp	.+8      	; 0x36a <main+0x38>
		{

			if(au8_gobk == 16)
 362:	c0 31       	cpi	r28, 0x10	; 16
 364:	09 f4       	brne	.+2      	; 0x368 <main+0x36>
			{
				au8_gobk = 0;
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	df 5f       	subi	r29, 0xFF	; 255
			}
			HAL_LCD_putAtLoc(HAL_LCD_ROW00, au8_gobk);
 36a:	6c 2f       	mov	r22, r28
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	0e 94 8b 01 	call	0x316	; 0x316 <HAL_LCD_putAtLoc>
			HAL_LCD_displayCharacter(au8_i + 42);
 372:	8d 2f       	mov	r24, r29
 374:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HAL_LCD_displayCharacter>
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	80 e7       	ldi	r24, 0x70	; 112
 37c:	92 e0       	ldi	r25, 0x02	; 2
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x4c>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x56>
 388:	00 00       	nop
			
			_delay_ms(50);
			HAL_LCD_putAtLoc(HAL_LCD_ROW01, au8_gobk);
 38a:	6c 2f       	mov	r22, r28
 38c:	80 ec       	ldi	r24, 0xC0	; 192
 38e:	0e 94 8b 01 	call	0x316	; 0x316 <HAL_LCD_putAtLoc>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	80 e7       	ldi	r24, 0x70	; 112
 396:	92 e0       	ldi	r25, 0x02	; 2
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x66>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x70>
 3a2:	00 00       	nop
			_delay_ms(50);
			HAL_LCD_displayCharacter(au8_i + 42);
 3a4:	8d 2f       	mov	r24, r29
 3a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <HAL_LCD_displayCharacter>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	83 ed       	ldi	r24, 0xD3	; 211
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <main+0x7e>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x88>
 3ba:	00 00       	nop
			
			_delay_ms(1000);
			
			HAL_LCD_clearDisplay();
 3bc:	0e 94 8f 01 	call	0x31e	; 0x31e <HAL_LCD_clearDisplay>
	
	HAL_LCD_clearDisplay();

    while (1) 
    {
		for(au8_i = 0, au8_gobk = 0; au8_i <= 125; au8_i++, au8_gobk++)
 3c0:	cf 5f       	subi	r28, 0xFF	; 255
 3c2:	d7 3a       	cpi	r29, 0xA7	; 167
 3c4:	71 f6       	brne	.-100    	; 0x362 <main+0x30>
 3c6:	ca cf       	rjmp	.-108    	; 0x35c <main+0x2a>

000003c8 <MCAL_GPIO_PinMode>:
void MCAL_GPIO_PinMode(u8_t au8_port , u8_t au8_pin , u8_t au8_type){
	/**
	 * @brief We will switch over the au_8port given and once we find it, we will switch over the au8_type and then we set up our mode.
	 * 
	 */
	switch(au8_port){
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	f9 f0       	breq	.+62     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3cc:	30 f0       	brcs	.+12     	; 0x3da <MCAL_GPIO_PinMode+0x12>
 3ce:	82 30       	cpi	r24, 0x02	; 2
 3d0:	a1 f1       	breq	.+104    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <MCAL_GPIO_PinMode+0x10>
 3d6:	49 c0       	rjmp	.+146    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 3d8:	08 95       	ret
		/**
		 * @brief The registers used in order to alter the I/P or O/P modes. MCAL_DDRx, MCAL_PORTx.
		 * 
		 */
		case PORTA:
			switch(au8_type)
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	49 f0       	breq	.+18     	; 0x3f0 <MCAL_GPIO_PinMode+0x28>
 3de:	18 f0       	brcs	.+6      	; 0x3e6 <MCAL_GPIO_PinMode+0x1e>
 3e0:	42 30       	cpi	r20, 0x02	; 2
 3e2:	79 f0       	breq	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e4:	08 95       	ret
			{
				case INPUT_FLOAT:
					MCAL_DDRA &= ~au8_pin;
 3e6:	8a b3       	in	r24, 0x1a	; 26
 3e8:	60 95       	com	r22
 3ea:	68 23       	and	r22, r24
 3ec:	6a bb       	out	0x1a, r22	; 26
					break;
 3ee:	08 95       	ret
				case INPUT_PULLUP:
					MCAL_DDRA &= ~au8_pin;
 3f0:	8a b3       	in	r24, 0x1a	; 26
 3f2:	96 2f       	mov	r25, r22
 3f4:	90 95       	com	r25
 3f6:	89 23       	and	r24, r25
 3f8:	8a bb       	out	0x1a, r24	; 26
					MCAL_PORTA |= au8_pin;
 3fa:	8b b3       	in	r24, 0x1b	; 27
 3fc:	68 2b       	or	r22, r24
 3fe:	6b bb       	out	0x1b, r22	; 27
					break;
 400:	08 95       	ret
				case OUTPUT:
					MCAL_DDRA |= au8_pin;
 402:	8a b3       	in	r24, 0x1a	; 26
 404:	68 2b       	or	r22, r24
 406:	6a bb       	out	0x1a, r22	; 26
					break;
 408:	08 95       	ret
				default:
					break;
			}
			break;
		case PORTB:
		switch(au8_type)
 40a:	41 30       	cpi	r20, 0x01	; 1
 40c:	49 f0       	breq	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40e:	18 f0       	brcs	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 410:	42 30       	cpi	r20, 0x02	; 2
 412:	79 f0       	breq	.+30     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 414:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRB &= ~au8_pin;
 416:	87 b3       	in	r24, 0x17	; 23
 418:	60 95       	com	r22
 41a:	68 23       	and	r22, r24
 41c:	67 bb       	out	0x17, r22	; 23
				break;
 41e:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRB &= ~au8_pin;
 420:	87 b3       	in	r24, 0x17	; 23
 422:	96 2f       	mov	r25, r22
 424:	90 95       	com	r25
 426:	89 23       	and	r24, r25
 428:	87 bb       	out	0x17, r24	; 23
			MCAL_PORTB |= au8_pin;
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	68 2b       	or	r22, r24
 42e:	68 bb       	out	0x18, r22	; 24
				break;
 430:	08 95       	ret
			case OUTPUT:
				MCAL_DDRB |= au8_pin;
 432:	87 b3       	in	r24, 0x17	; 23
 434:	68 2b       	or	r22, r24
 436:	67 bb       	out	0x17, r22	; 23
				break;
 438:	08 95       	ret
			default:
				break;
		}
		break;
		case PORTC:
		switch(au8_type)
 43a:	41 30       	cpi	r20, 0x01	; 1
 43c:	49 f0       	breq	.+18     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 43e:	18 f0       	brcs	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	42 30       	cpi	r20, 0x02	; 2
 442:	79 f0       	breq	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 444:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRC &= ~au8_pin;
 446:	84 b3       	in	r24, 0x14	; 20
 448:	60 95       	com	r22
 44a:	68 23       	and	r22, r24
 44c:	64 bb       	out	0x14, r22	; 20
				break;
 44e:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRC &= ~au8_pin;
 450:	84 b3       	in	r24, 0x14	; 20
 452:	96 2f       	mov	r25, r22
 454:	90 95       	com	r25
 456:	89 23       	and	r24, r25
 458:	84 bb       	out	0x14, r24	; 20
				MCAL_PORTC |= au8_pin;
 45a:	85 b3       	in	r24, 0x15	; 21
 45c:	68 2b       	or	r22, r24
 45e:	65 bb       	out	0x15, r22	; 21
				break;
 460:	08 95       	ret
			case OUTPUT:
				MCAL_DDRC |= au8_pin;
 462:	84 b3       	in	r24, 0x14	; 20
 464:	68 2b       	or	r22, r24
 466:	64 bb       	out	0x14, r22	; 20
				break;
 468:	08 95       	ret
			default:
				break;
		}
		break;
		case PORTD:
		switch(au8_type)
 46a:	41 30       	cpi	r20, 0x01	; 1
 46c:	49 f0       	breq	.+18     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 46e:	18 f0       	brcs	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 470:	42 30       	cpi	r20, 0x02	; 2
 472:	79 f0       	breq	.+30     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 474:	08 95       	ret
		{
			case INPUT_FLOAT:
				MCAL_DDRD &= ~au8_pin;
 476:	81 b3       	in	r24, 0x11	; 17
 478:	60 95       	com	r22
 47a:	68 23       	and	r22, r24
 47c:	61 bb       	out	0x11, r22	; 17
				break;
 47e:	08 95       	ret
			case INPUT_PULLUP:
				MCAL_DDRD &= ~au8_pin;
 480:	81 b3       	in	r24, 0x11	; 17
 482:	96 2f       	mov	r25, r22
 484:	90 95       	com	r25
 486:	89 23       	and	r24, r25
 488:	81 bb       	out	0x11, r24	; 17
				MCAL_PORTD |= au8_pin;
 48a:	82 b3       	in	r24, 0x12	; 18
 48c:	68 2b       	or	r22, r24
 48e:	62 bb       	out	0x12, r22	; 18
				break;
 490:	08 95       	ret
			case OUTPUT:
				MCAL_DDRD |= au8_pin;
 492:	81 b3       	in	r24, 0x11	; 17
 494:	68 2b       	or	r22, r24
 496:	61 bb       	out	0x11, r22	; 17
 498:	08 95       	ret

0000049a <MCAL_GPIO_PinState>:
void MCAL_GPIO_PinState(u8_t au8_port , u8_t au8_pin , u8_t au8_state){
	/**
	 * @brief We will switch over the au_8port given and once we find it, we will switch over the au8_type and then we set up our state.
	 * 
	 */
	switch(au8_port){
 49a:	81 11       	cpse	r24, r1
 49c:	0f c0       	rjmp	.+30     	; 0x4bc <MCAL_GPIO_PinState+0x22>
		/**
		 * @brief The registers used in order to alter the I/P or O/P states. MCAL_PORTx.
		 * 
		 */
		case PORTA:
		switch(au8_state)
 49e:	44 23       	and	r20, r20
 4a0:	19 f0       	breq	.+6      	; 0x4a8 <MCAL_GPIO_PinState+0xe>
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <MCAL_GPIO_PinState+0x1a>
 4a6:	0a c0       	rjmp	.+20     	; 0x4bc <MCAL_GPIO_PinState+0x22>
		{
			case LOW:
			MCAL_PORTA &= ~au8_pin;
 4a8:	9b b3       	in	r25, 0x1b	; 27
 4aa:	26 2f       	mov	r18, r22
 4ac:	20 95       	com	r18
 4ae:	92 23       	and	r25, r18
 4b0:	9b bb       	out	0x1b, r25	; 27
			break;
 4b2:	24 c0       	rjmp	.+72     	; 0x4fc <MCAL_GPIO_PinState+0x62>
			case HIGH:
			MCAL_PORTA |= au8_pin;
 4b4:	9b b3       	in	r25, 0x1b	; 27
 4b6:	96 2b       	or	r25, r22
 4b8:	9b bb       	out	0x1b, r25	; 27
			break;
 4ba:	20 c0       	rjmp	.+64     	; 0x4fc <MCAL_GPIO_PinState+0x62>
			default:
			break;
		}
		break;
	}
	switch(au8_port){
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	71 f4       	brne	.+28     	; 0x4dc <MCAL_GPIO_PinState+0x42>
		case PORTB:
			switch(au8_state)
 4c0:	44 23       	and	r20, r20
 4c2:	19 f0       	breq	.+6      	; 0x4ca <MCAL_GPIO_PinState+0x30>
 4c4:	41 30       	cpi	r20, 0x01	; 1
 4c6:	31 f0       	breq	.+12     	; 0x4d4 <MCAL_GPIO_PinState+0x3a>
 4c8:	09 c0       	rjmp	.+18     	; 0x4dc <MCAL_GPIO_PinState+0x42>
			{
				case LOW:
					MCAL_PORTB &= ~au8_pin;
 4ca:	88 b3       	in	r24, 0x18	; 24
 4cc:	60 95       	com	r22
 4ce:	68 23       	and	r22, r24
 4d0:	68 bb       	out	0x18, r22	; 24
					break;
 4d2:	08 95       	ret
				case HIGH:
					MCAL_PORTB |= au8_pin;
 4d4:	88 b3       	in	r24, 0x18	; 24
 4d6:	68 2b       	or	r22, r24
 4d8:	68 bb       	out	0x18, r22	; 24
					break;
 4da:	08 95       	ret
				default:
					break;
			}
			break;
	}
	switch(au8_port){
 4dc:	82 30       	cpi	r24, 0x02	; 2
 4de:	71 f4       	brne	.+28     	; 0x4fc <MCAL_GPIO_PinState+0x62>
		case PORTC:
			switch(au8_state)
 4e0:	44 23       	and	r20, r20
 4e2:	19 f0       	breq	.+6      	; 0x4ea <MCAL_GPIO_PinState+0x50>
 4e4:	41 30       	cpi	r20, 0x01	; 1
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <MCAL_GPIO_PinState+0x5a>
 4e8:	09 c0       	rjmp	.+18     	; 0x4fc <MCAL_GPIO_PinState+0x62>
			{
				case LOW:
					MCAL_PORTC &= ~au8_pin;
 4ea:	85 b3       	in	r24, 0x15	; 21
 4ec:	60 95       	com	r22
 4ee:	68 23       	and	r22, r24
 4f0:	65 bb       	out	0x15, r22	; 21
					break;
 4f2:	08 95       	ret
				case HIGH:
					MCAL_PORTC |= au8_pin;
 4f4:	85 b3       	in	r24, 0x15	; 21
 4f6:	68 2b       	or	r22, r24
 4f8:	65 bb       	out	0x15, r22	; 21
					break;
 4fa:	08 95       	ret
				default:
					break;
			}
			break;
	}
	switch(au8_port){
 4fc:	83 30       	cpi	r24, 0x03	; 3
 4fe:	69 f4       	brne	.+26     	; 0x51a <MCAL_GPIO_PinState+0x80>
		case PORTD:
			switch(au8_state)
 500:	44 23       	and	r20, r20
 502:	19 f0       	breq	.+6      	; 0x50a <MCAL_GPIO_PinState+0x70>
 504:	41 30       	cpi	r20, 0x01	; 1
 506:	31 f0       	breq	.+12     	; 0x514 <MCAL_GPIO_PinState+0x7a>
 508:	08 95       	ret
			{
				case LOW:
					MCAL_PORTD &= ~au8_pin;
 50a:	82 b3       	in	r24, 0x12	; 18
 50c:	60 95       	com	r22
 50e:	68 23       	and	r22, r24
 510:	62 bb       	out	0x12, r22	; 18
					break;
 512:	08 95       	ret
				case HIGH:
					MCAL_PORTD |= au8_pin;
 514:	82 b3       	in	r24, 0x12	; 18
 516:	68 2b       	or	r22, r24
 518:	62 bb       	out	0x12, r22	; 18
 51a:	08 95       	ret

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
